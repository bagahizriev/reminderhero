import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from config import TELEGRAM_TOKEN
from database import Database
from speech_recognition import SpeechRecognizer
from event_extractor import EventExtractor
from notification_manager import NotificationManager
import pytz
from datetime import datetime
from aiogram.filters import StateFilter

class TimezoneStates(StatesGroup):
    waiting_for_timezone = State()

class ManualReminderStates(StatesGroup):
    waiting_for_description = State()
    waiting_for_datetime = State()

class ReminderBot:
    def __init__(self):
        self.bot = Bot(token=TELEGRAM_TOKEN)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.db = Database('reminders.db')
        self.speech_recognizer = SpeechRecognizer()
        self.event_extractor = EventExtractor()
        self.notification_manager = NotificationManager(TELEGRAM_TOKEN, self.db)
        self.register_handlers()

    def register_handlers(self):
        # –ë–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self.start_command, Command("start"))
        self.dp.message.register(self.list_command, Command("list"))
        self.dp.message.register(self.settings_command, Command("settings"))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.dp.message.register(self.handle_voice, F.voice)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        self.dp.message.register(
            self.process_timezone_setting,
            TimezoneStates.waiting_for_timezone
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
        self.dp.callback_query.register(
            self.cancel_reminder,
            F.data.startswith("cancel_")
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –∫–æ–Ω—Ü–µ,
        # –ø–æ—Å–ª–µ –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        self.dp.message.register(
            self.manual_command, 
            Command("manual")
        )
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.dp.message.register(
            self.process_manual_description,
            F.text,  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            StateFilter(ManualReminderStates.waiting_for_description)
        )
        self.dp.message.register(
            self.process_manual_datetime,
            F.text,  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            StateFilter(ManualReminderStates.waiting_for_datetime)
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –º–∞–Ω—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
        self.dp.callback_query.register(
            self.cancel_manual_callback,
            F.data == "cancel_manual"
        )
        
        # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º
        self.dp.message.register(
            self.handle_text,
            lambda message: not message.voice 
            and not message.text.startswith('/')
            and message.text
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        self.dp.callback_query.register(
            self.show_delete_buttons,
            F.data == "show_delete_buttons"
        )
        self.dp.callback_query.register(
            self.delete_reminder_by_id,
            F.data.startswith("delete_")
        )
        self.dp.callback_query.register(
            self.save_deletions,
            F.data == "save_deletions"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        self.dp.callback_query.register(
            self.show_timezone_change,
            F.data == "change_timezone"
        )
        self.dp.callback_query.register(
            self.save_timezone,
            F.data == "save_timezone"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
        self.dp.callback_query.register(
            self.process_timezone_button,
            F.data.startswith("timezone_")
        )

    def format_datetime(self, dt_str: str, user_timezone: str) -> str:
        dt = datetime.strptime(dt_str, '%Y-%m-%d %H:%M')
        dt = pytz.UTC.localize(dt)
        local_dt = dt.astimezone(pytz.timezone(user_timezone))
        return local_dt.strftime('%d.%m.%Y %H:%M')

    async def start_command(self, message: types.Message):
        text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n\n"
            "üìù –ö–æ–º–∞–Ω–¥—ã:\n"
            "/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
            "/settings - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å\n\n"
            "üé§ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ –¥–∞—Ç—É, "
            "–Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "- '–í—Å—Ç—Ä–µ—á–∞ —Å –≤—Ä–∞—á–æ–º 25 –º–∞—Ä—Ç–∞ –≤ 14:30'\n"
            "- '–ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ'\n"
            "- '–ó–∞–≤—Ç—Ä–∞ –≤ 15:00 –≤—Å—Ç—Ä–µ—á–∞'\n"
            "- '–ß–µ—Ä–µ–∑ 3 –¥–Ω—è –∑–∞–±—Ä–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã'"
        )
        await message.answer(text)

    async def list_command(self, message: types.Message):
        user_id = message.from_user.id
        reminders = self.db.get_user_reminders(user_id)
        
        if not reminders:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
            return
        
        user_timezone = self.db.get_user_timezone(user_id)
        text = "üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
        
        for unique_key, reminder_data in reminders.items():
            formatted_datetime = self.format_datetime(
                reminder_data['event_datetime'], 
                user_timezone
            )
            text += f"üéØ –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ (ID: {reminder_data['display_id']}):\n"
            text += f"‚îî {reminder_data['description']}\n"
            text += f"‚îî {formatted_datetime}\n"
            
            if reminder_data['notifications']:
                text += "‚îú –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
                for notif in reminder_data['notifications']:
                    formatted_notif_time = self.format_datetime(
                        notif['datetime'],
                        user_timezone
                    )
                    text += f"  ‚îî {notif['timing']} ({formatted_notif_time})\n"
            text += "\n"
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(
                text="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ ID",
                callback_data="show_delete_buttons"
            )]
        ])
        
        await message.answer(text, reply_markup=keyboard)

    async def show_delete_buttons(self, callback: types.CallbackQuery):
        user_id = callback.from_user.id
        reminders = self.db.get_user_reminders(user_id)
        
        if not reminders:
            await callback.answer("–ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        user_timezone = self.db.get_user_timezone(user_id)
        text = "üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–øÔøΩÔøΩ–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        buttons = []
        for unique_key, reminder_data in reminders.items():
            formatted_datetime = self.format_datetime(
                reminder_data['event_datetime'], 
                user_timezone
            )
            text += f"üéØ –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ (ID: {reminder_data['display_id']}):\n"
            text += f"‚îî {reminder_data['description']}\n"
            text += f"‚îî {formatted_datetime}\n"
            
            if reminder_data['notifications']:
                text += "‚îú –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
                for notif in reminder_data['notifications']:
                    formatted_notif_time = self.format_datetime(
                        notif['datetime'],
                        user_timezone
                    )
                    text += f"  ‚îî {notif['timing']} ({formatted_notif_time})\n"
            text += "\n"
            
            buttons.append([types.InlineKeyboardButton(
                text=f"üóë ID: {reminder_data['display_id']}",
                callback_data=f"delete_{reminder_data['display_id']}"
            )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –≤–Ω–∏–∑—É
        buttons.append([types.InlineKeyboardButton(
            text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            callback_data="save_deletions"
        )])
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

    async def delete_reminder_by_id(self, callback: types.CallbackQuery):
        display_id = int(callback.data.split('_')[1])
        user_id = callback.from_user.id
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            real_id = self.db.get_real_reminder_id(user_id, display_id)
            if real_id is None:
                await callback.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É ID
            self.db.delete_reminder(real_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            reminders = self.db.get_user_reminders(user_id)
            
            if not reminders:
                await callback.message.edit_text("–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
                await callback_query.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–≤—ã–º–∏ display_id
            user_timezone = self.db.get_user_timezone(user_id)
            text = "üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
            
            buttons = []
            for unique_key, reminder_data in reminders.items():
                formatted_datetime = self.format_datetime(
                    reminder_data['event_datetime'], 
                    user_timezone
                )
                text += f"üéØ –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ (ID: {reminder_data['display_id']}):\n"
                text += f"‚îî {reminder_data['description']}\n"
                text += f"‚îî {formatted_datetime}\n"
                
                if reminder_data['notifications']:
                    text += "‚îú –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
                    for notif in reminder_data['notifications']:
                        formatted_notif_time = self.format_datetime(
                            notif['datetime'],
                            user_timezone
                        )
                        text += f"  ‚îî {notif['timing']} ({formatted_notif_time})\n"
                text += "\n"
                
                buttons.append([types.InlineKeyboardButton(
                    text=f"üóë ID: {reminder_data['display_id']}",
                    callback_data=f"delete_{reminder_data['display_id']}"
                )])
            
            buttons.append([types.InlineKeyboardButton(
                text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                callback_data="save_deletions"
            )])
            
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await callback.message.edit_text(text, reply_markup=keyboard)
            await callback.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
            
        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")

    async def save_deletions(self, callback: types.CallbackQuery):
        user_id = callback.from_user.id
        reminders = self.db.get_user_reminders(user_id)
        
        if not reminders:
            await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
            await callback.answer()
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–π –ø–∏—Å–æ–∫ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "–£–¥–∞–ª–∏—Ç—å –ø–æ ID"
        user_timezone = self.db.get_user_timezone(user_id)
        text = "üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
        
        for unique_key, reminder_data in reminders.items():
            formatted_datetime = self.format_datetime(
                reminder_data['event_datetime'], 
                user_timezone
            )
            text += f"üéØ –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ (ID: {reminder_data['display_id']}):\n"
            text += f"‚îî {reminder_data['description']}\n"
            text += f"‚îî {formatted_datetime}\n"
            
            if reminder_data['notifications']:
                text += "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
                for notif in reminder_data['notifications']:
                    formatted_notif_time = self.format_datetime(
                        notif['datetime'],
                        user_timezone
                    )
                    text += f"  ‚îî {notif['timing']} ({formatted_notif_time})\n"
            text += "\n"
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(
                text="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ ID",
                callback_data="show_delete_buttons"
            )]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

    async def settings_command(self, message: types.Message):
        user_timezone = self.db.get_user_timezone(message.from_user.id)
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Etc/GMT+3 –≤ GMT-3
        display_timezone = user_timezone.replace('Etc/', '')
        if display_timezone.startswith('GMT+'):
            display_timezone = 'GMT' + display_timezone[4:].replace('+', '-')
        elif display_timezone.startswith('GMT-'):
            display_timezone = 'GMT' + display_timezone[4:].replace('-', '+')
        
        text = f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\nüåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {display_timezone}"
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(
                text="üîÑ –°–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
                callback_data="change_timezone"
            )]
        ])
        
        await message.answer(text, reply_markup=keyboard)

    async def show_timezone_change(self, callback: types.CallbackQuery, state: FSMContext):
        text = (
            "üåç –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ GMT¬±X\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π:"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
        buttons = [
            [
                types.InlineKeyboardButton(text="GMT+3 (–ú–æ—Å–∫–≤–∞)", callback_data="timezone_GMT+3"),
                types.InlineKeyboardButton(text="GMT+4 (–°–∞–º–∞—Ä–∞)", callback_data="timezone_GMT+4")
            ],
            [
                types.InlineKeyboardButton(text="GMT+5 (–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥)", callback_data="timezone_GMT+5"),
                types.InlineKeyboardButton(text="GMT+6 (–û–º—Å–∫)", callback_data="timezone_GMT+6")
            ],
            [
                types.InlineKeyboardButton(text="GMT+7 (–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫)", callback_data="timezone_GMT+7"),
                types.InlineKeyboardButton(text="GMT+8 (–ò—Ä–∫—É—Ç—Å–∫)", callback_data="timezone_GMT+8")
            ],
            [
                types.InlineKeyboardButton(text="GMT+9 (–Ø–∫—É—Ç—Å–∫)", callback_data="timezone_GMT+9"),
                types.InlineKeyboardButton(text="GMT+10 (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫)", callback_data="timezone_GMT+10")
            ],
            [
                types.InlineKeyboardButton(text="GMT+11 (–ú–∞–≥–∞–¥–∞–Ω)", callback_data="timezone_GMT+11"),
                types.InlineKeyboardButton(text="GMT+12 (–ö–∞–º—á–∞—Ç–∫–∞)", callback_data="timezone_GMT+12")
            ],
            [
                types.InlineKeyboardButton(
                    text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                    callback_data="save_timezone"
                )
            ]
        ]
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await state.set_state(TimezoneStates.waiting_for_timezone)
        await callback.answer()

    async def process_timezone_setting(self, message: types.Message, state: FSMContext):
        timezone_str = message.text.strip().upper()
        
        if not timezone_str.startswith('GMT') or len(timezone_str) < 4:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç GMT¬±X (–Ω–∞–ø—Ä–∏–º–µ—Ä, GMT+3)\n"
                "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
            )
            return
        
        try:
            offset = int(timezone_str[3:])
            if offset < -12 or offset > 14:
                raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Å–º–µ—â–µ–Ω–∏–µ")
            
            timezone_name = f"Etc/GMT{'-' if offset > 0 else '+'}{abs(offset)}"
            self.db.set_user_timezone(message.from_user.id, timezone_name)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            text = f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\nüåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone_str}"
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(
                    text="üîÑ –º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
                    callback_data="change_timezone"
                )]
            ])
            
            await message.answer(text, reply_markup=keyboard)
            await state.clear()
            
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç GMT¬±X, –≥–¥–µ X - —á–∏—Å–ª–æ –æ—Ç -12 –¥–æ +14\n"
                "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
            )

    async def save_timezone(self, callback: types.CallbackQuery, state: FSMContext):
        user_timezone = self.db.get_user_timezone(callback.from_user.id)
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Etc/GMT+3 –≤ GMT-3
        display_timezone = user_timezone.replace('Etc/', '')
        if display_timezone.startswith('GMT+'):
            display_timezone = 'GMT' + display_timezone[4:].replace('+', '-')
        elif display_timezone.startswith('GMT-'):
            display_timezone = 'GMT' + display_timezone[4:].replace('-', '+')
        
        text = f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\nüåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {display_timezone}"
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(
                text="üîÑ –°–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
                callback_data="change_timezone"
            )]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await state.clear()
        await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

    async def handle_voice(self, message: types.Message):
        try:
            file = await self.bot.get_file(message.voice.file_id)
            file_path = file.file_path
            voice_ogg = "voice.ogg"
            voice_wav = "voice.wav"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await self.bot.download_file(file_path, voice_ogg)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ä–∞—Å–ø–æ–∑–∞–º
            self.speech_recognizer.convert_ogg_to_wav(voice_ogg, voice_wav)
            recognized_text = self.speech_recognizer.transcribe(voice_wav)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏–∏
            user_timezone = self.db.get_user_timezone(message.from_user.id)
            event_data = await self.event_extractor.extract_event_data(recognized_text, user_timezone)
            
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
            reminder_id = self.db.save_reminder(
                message.from_user.id,
                event_data["description"],
                event_data["datetime"]
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                    callback_data=f"cancel_{reminder_id}"
                )]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            formatted_datetime = self.format_datetime(event_data['datetime'], user_timezone)
            text = (
                f"‚úÖ –ù–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
                f"–Ø —Ä–∞—Å–ø–æ–∑–Ω–∞–ª: {recognized_text}\n\n"
                f"–°–æ–±—ã—Ç–∏–µ: {event_data['description']}\n"
                f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {formatted_datetime}"
            )
            await message.answer(text, reply_markup=keyboard)
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º reminder_id
            self.notification_manager.schedule_notifications(
                message.from_user.id,
                event_data,
                user_timezone,
                reminder_id
            )
            
        except Exception as e:
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for file in [voice_ogg, voice_wav]:
                if os.path.exists(file):
                    os.remove(file)

    async def handle_text(self, message: types.Message, state: FSMContext):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π state
        current_state = await state.get_state()
        print(f"handle_text: —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {current_state}")
        
        if current_state in [ManualReminderStates.waiting_for_description.state, 
                           ManualReminderStates.waiting_for_datetime.state]:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –º–∞–Ω—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è,
            # –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            print("handle_text: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑-–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏–∏
            user_timezone = self.db.get_user_timezone(message.from_user.id)
            event_data = await self.event_extractor.extract_event_data(message.text, user_timezone)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            reminder_id = self.db.save_reminder(
                message.from_user.id,
                event_data["description"],
                event_data["datetime"]
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                    callback_data=f"cancel_{reminder_id}"
                )]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            formatted_datetime = self.format_datetime(event_data['datetime'], user_timezone)
            text = (
                f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
                f"–°–æ–±—ã—Ç–∏–µ: {event_data['description']}\n"
                f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {formatted_datetime}"
            )
            await message.answer(text, reply_markup=keyboard)
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º reminder_id
            self.notification_manager.schedule_notifications(
                message.from_user.id,
                event_data,
                user_timezone,
                reminder_id
            )
            
        except Exception as e:
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    async def cancel_reminder(self, callback_query: types.CallbackQuery):
        reminder_id = int(callback_query.data.split('_')[1])
        
        try:
            self.db.delete_reminder(reminder_id)
            await callback_query.message.edit_text(
                f"{callback_query.message.text}\n\n‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!"
            )
            await callback_query.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        except Exception as e:
            await callback_query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {str(e)}")

    async def process_timezone_button(self, callback: types.CallbackQuery, state: FSMContext):
        timezone_str = callback.data.replace("timezone_", "")
        try:
            offset = int(timezone_str[3:])
            timezone_name = f"Etc/GMT{'-' if offset > 0 else '+'}{abs(offset)}"
            self.db.set_user_timezone(callback.from_user.id, timezone_name)
            
            text = f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\nüåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone_str}"
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(
                    text="üîÑ –°–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
                    callback_data="change_timezone"
                )]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard)
            await state.clear()
            await callback.answer("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {str(e)}")

    async def manual_command(self, message: types.Message, state: FSMContext):
        print("–ù–∞—á–∞—Ç–æ –º–∞–Ω—É–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        text = (
            "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Ä—É—á–Ω—É—é\n\n"
            "–®–∞–≥ 1: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '–í—Å—Ç—Ä–µ—á–∞ —Å –≤—Ä–∞—á–æ–º' –∏–ª–∏ '–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ'"
        )
        # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ",
                callback_data="cancel_manual"
            )]
        ])
        await state.set_state(ManualReminderStates.waiting_for_description)
        await message.answer(text, reply_markup=keyboard)

    async def process_manual_description(self, message: types.Message, state: FSMContext):
        print(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ: {message.text}")
        print(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        await state.update_data(description=message.text)
        
        text = (
            "üìÖ –®–∞–≥ 2: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú'\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '25.11.2024 15:30'\n\n"
            "‚ùóÔ∏è –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–Ω—è/–º–µ—Å—è—Ü–∞/–≥–æ–¥–∞\n"
            "–∏ –¥–≤–æ–µ—Ç–æ—á–∏–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤ –∏ –º–∏–Ω—É—Ç"
        )
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ",
                callback_data="cancel_manual"
            )]
        ])
        
        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏")
        await state.set_state(ManualReminderStates.waiting_for_datetime)
        await message.answer(text, reply_markup=keyboard)

    async def process_manual_datetime(self, message: types.Message, state: FSMContext):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            data = await state.get_data()
            description = data['description']
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            try:
                dt = datetime.strptime(message.text, '%d.%m.%Y %H:%M')
            except ValueError:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.11.2024 15:30"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
            user_timezone = self.db.get_user_timezone(message.from_user.id)
            local_tz = pytz.timezone(user_timezone)
            current_time = datetime.now(local_tz)
            
            # –õ–æ–∫–∞–ª–∏–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            local_dt = local_tz.localize(dt)
            
            if local_dt < current_time:
                await message.answer(
                    "‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è."
                )
                return
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            utc_dt = local_dt.astimezone(pytz.UTC)
            
            # –°–æ–∑–¥–∞–µ–º event_data –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            event_data = {
                "description": description,
                "datetime": utc_dt.strftime('%Y-%m-%d %H:%M')
            }
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            reminder_id = self.db.save_reminder(
                message.from_user.id,
                event_data["description"],
                event_data["datetime"]
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                    callback_data=f"cancel_{reminder_id}"
                )]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            formatted_datetime = self.format_datetime(event_data['datetime'], user_timezone)
            text = (
                f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤—Ä—É—á–Ω—É—é!\n\n"
                f"–°–æ–±—ã—Ç–∏–µ: {event_data['description']}\n"
                f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {formatted_datetime}"
            )
            await message.answer(text, reply_markup=keyboard)
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            self.notification_manager.schedule_notifications(
                message.from_user.id,
                event_data,
                user_timezone,
                reminder_id
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏
            await state.clear()
            
        except Exception as e:
            await message.answer(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                reply_markup=types.ReplyKeyboardMarkup(
                    keyboard=[[types.KeyboardButton(text="/cancel")]],
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
            )

    async def cancel_manual_callback(self, callback: types.CallbackQuery, state: FSMContext):
        current_state = await state.get_state()
        if current_state in [ManualReminderStates.waiting_for_description.state,
                            ManualReminderStates.waiting_for_datetime.state]:
            await state.clear()
            await callback.message.edit_text(
                "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /manual"
            )
            await callback.answer()
        else:
            await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")

    async def run(self):
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await self.notification_manager.init_scheduler()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            if self.notification_manager.scheduler:
                self.notification_manager.scheduler.shutdown()
        finally:
            await self.bot.session.close()

if __name__ == "__main__":
    bot = ReminderBot()
    try:
        asyncio.run(bot.run())
    except KeyboardInterrupt:
        print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...") 